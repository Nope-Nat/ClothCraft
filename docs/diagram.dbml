// Everything is immutable by default
// and cannot be dropped.
// If something is mutable or
// can be dropped, then it is
// stated explicitly.

TablePartial metadata {
  created_at timestamp [not null, default: 'now()']
}

Table product {
  id_product serial PK
  id_category int [ref: > category.id_category, not null]
  id_sizing_type int [ref: > sizing_type.id_sizing_type, not null]
  id_country int [ref: > country.id_country, not null]
  sku_code varchar [not null, unique]
  active bool [not null]
  short_description text
  thumbnail_path varchar
  name varchar [not null]
  ~metadata
  // sku_code between 8 and 12 chars cyfry litery
  // name between 1 and 100 chars
}

Table product_details_history {
  id_product int [ref: > product.id_product, not null]
  description text [not null, note: "in markdown"]
  ~metadata
  indexes {
    (id_product, created_at) [pk]
  }
}

Table product_image {
  id_product int [ref: > product.id_product, not null]
  img_path varchar [not null]
  order int [not null, note: "describes order of photos in gallery"]
  alt_desc varchar [note: "alternative text"]
  indexes {
    img_path [pk]
  }
}


Table discount_history {
  id_product int [ref: > product.id_product, not null]
  discount float [not null, note: "percentage discount"]
  from timestamp [not null]
  to timestmap
  secret_code varchar
  indexes {
    (id_product, from, to) [pk]
  }
  // discount > 0
  // from < to lub to == null
}

Table cart_product_variant {
  id_user uuid [ref: > user.id_user, not null]
  id_variant_size int [ref: > variant_size.id_variant_size, not null]
  quantity int [not null]
  note: '''
    # represents cart for sesssion
    does not lock products
  '''
  // quantity > 0
  indexes {
    (id_user, id_variant_size) [pk]
  }
}


Table price_history {
  id_product int [ref: > product.id_product, not null]
  price float [not null]
  created_at timestamp [not null, default: `now()`]
  indexes {
    (id_product, created_at) [pk]
  }
  // price >= 0
}

Table variant {
  id_variant serial PK
  id_product int [ref: > product.id_product, not null]
  name varchar(100) [not null]
  color char[3] [not null]
  active bool [not null]
  ~metadata
}

Table variant_size {
  id_variant_size serial PK
  id_variant int [ref: > variant.id_variant, not null]
  id_size int [ref: > size.id_size, not null]
  ~metadata
}

Table tag {
  id_tag serial PK
  name varchar(100) [not null, unique, note: "e.g. sport"]
  ~metadata
  note: '''
    Is mutable and can be dropped.
  '''
}

Table tag_product {
  id_tag id [ref: > tag.id_tag, not null]
  id_product id [ref: > product.id_product, not null]
  indexes {
    (id_product, id_tag) [pk]
  }
  note: '''
    Is mutable and can be dropped.
  '''
}

Table category {
  id_category serial PK
  parent_category int [ref: > category.id_category]
  name varchar(100) [not null, note:"e.g. shoes, trousers"]
  ~metadata
  indexes {
    (parent_category, name) [unique]
  }
}

 
// dla koszulek
// dla butow
// dla spodni etc
Table sizing_type {
  id_sizing_type serial PK
  name varchar(100) [not null, unique, note: "e.g. for tshirts, for boots"]
  ~metadata
}

// US, UK
Table sizing_format {
  id_sizing_format serial PK
  value varchar(100) [not null, unique, note:"e.g US, UK"]
  ~metadata
}

Table size {
  id_size serial PK
  id_sizing_type int [ref: > sizing_type.id_sizing_type, not null]
  order int [not null, note: "for displaying sizes in order"]
  ~metadata
}

// L, M, S, 32, 42 etc 
Table size_data {
  id_size int [ref: > size.id_size, not null]
  id_sizing_format int [ref: > sizing_format.id_sizing_format, not null]
  value varchar(30) [not null, note: "e.g. L, M, 32, 160-170"]
  ~metadata

  indexes {
    (id_size, id_sizing_format) [pk]
  }
}

Table storage_delivery {
  id_storage_delivery serial pk
  delivered_at timestamp [not null, default: 'now()']
}

Table storage_delivery_part {
  id_delivery int [ref: > storage_delivery.id_storage_delivery, not null]
  id_variant_size int [ref: > variant_size.id_variant_size, not null]
  quantity int [not null]
  // check quantity > 0
  indexes {
    (id_delivery, id_variant_size) [pk]
  }
}

Table country {
  id_country serial pk
  name varchar(100) [not null]
  short_code char[3] [not null]
}

Table product_material {
  id_product int [ref: > product.id_product, not null]
  id_material int [ref: > material.id_material, not null]
  percentage float [not null]
  indexes {
    (id_product, id_material) [pk]
  }
  // some check that materials added to product should sum up to 100%
}

Table material {
  id_material serial pk
  id_material_type int [ref: > material_type.id_material_type, not null]
  origin int [ref: > country.id_country, not null]
}

Table material_type {
  id_material_type serial pk
  name varchar(100) [not null]
  description text [note: "for example material can have some attest"]
  recyclable boolean [not null]
  weight_per_unit float [not null, note: "grams per cm^3"]
}

Table order {
  id_order serial pk
  shipping_price float [not null]
  id_user uuid [ref: > user.id_user, not null]
  payed_at timestamp
  cancelled_at timestamp
  shippment_tracking_number uuid [not null]
  return_tracking_number uuid
  secret_code varchar [note: "The secret code the user provided"]
}
Table order_history {
  id_order integer pk [ref: > order.id_order]
  status enum [note: '''
    paid, pending, shipped, delivered, cancelled,
    return_requested, return_rejected, return_pending,
    return_shipped, return_delivered
    ''']
  ~metadata
}
Table order_product {
  id_order int [ref: > order.id_order, not null]
  id_variant_size int [ref: > variant_size.id_variant_size, not null]
  quantity int [not null]
  // quantity > 0
  indexes {
    (id_order, id_variant_size) [pk]
  }
}
Table user {
  id_user uuid pk
  username varchar(50) [not null]
  email varchar(100) [not null]
  password_hash char(256) [not null]
  admin bool [not null]
  note: '''
    Is mutable and can be dropped.
  '''
}

Table session {
  id_session serial pk
  id_user uuid [ref: > user.id_user, not null]
  ip varchar(100) [not null]
  device_details text
  logged_at timestamp [not null]
  note: '''
    Is mutable and can be dropped.
  '''
}
